name: docker build

on:
  push:
    paths-ignore:
      - "README.md"
    branches:
      - master
  pull_request:
    branches:
      - master
  release:
    types:
      - created
  schedule:
    - cron: "0 0 1 * *"

jobs:
  build:
    if: "!contains(github.event.commits[0].message, '[skip ci]')"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Prepare
        id: prepare
        run: |
          HEAD_TAG=$(git tag --points-at HEAD)
          PLATFORMS=linux/386,linux/amd64,linux/arm/v6,linux/arm/v7,linux/arm64
          VERSION=latest

          if [[ $HEAD_TAG =~ ^v[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
            VERSION=${HEAD_TAG//v}
          fi

          echo ::set-output name=version::${VERSION}
          echo ::set-output name=docker_image::${GITHUB_REPOSITORY//docker-}
          echo ::set-output name=platforms::${PLATFORMS}

      - name: Build on pull request
        if: success() && github.event_name == 'pull_request'
        run: |
          docker build .

      - name: Set up Docker Buildx
        if: success() && github.event_name != 'pull_request'
        uses: crazy-max/ghaction-docker-buildx@v3
        with:
          buildx-version: latest
          qemu-version: latest

      - name: Docker Login
        if: success() && github.event_name != 'pull_request'
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        run: |
          echo "${DOCKER_PASSWORD}" | docker login --username "${DOCKER_USERNAME}" --password-stdin

      - name: Build & Push
        if: success() && github.event_name != 'pull_request'
        run: |
          docker buildx build \
            --platform ${{ steps.prepare.outputs.platforms }} \
            --tag ${{ steps.prepare.outputs.docker_image }}:${{ steps.prepare.outputs.version }} \
            --file ./Dockerfile \
            --push .
      
